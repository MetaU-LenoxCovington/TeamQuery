// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipRole {
  ADMIN
  MEMBER
  MANAGER
  VIEWER
}

enum AccessLevel {
  PUBLIC        // Anyone in org can read
  GROUP         // All group members can read
  MANAGERS      // Only managers+ can read
  ADMINS        // Only admins can read
  RESTRICTED    // Only specific users
}

model Organization {
  id String @id @default(cuid())
  name String
  description String?
  maxWords Int?
  currentWordCount Int @default(0)
  lastIndexUpdate DateTime?
  lastDataChange DateTime @default(now())

  defaultDocumentAccess AccessLevel @default(GROUP)
  allowMemberUploads Boolean @default(true)
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminUserId String
  adminUser User @relation("AdminOrganizations", fields: [adminUserId], references: [id])

  createdBy String?
  creator User? @relation("CreatedOrganizations", fields: [createdBy], references: [id])

  memberships       OrganizationMembership[]
  groups             Group[]
  documents         Document[]
  folders           Folder[]
  chunks            Chunk[]
  embeddings        Embedding[]
  auditLogs         AuditLog[]
  searchQueries     SearchQuery[]
  invitations       OrganizationInvite[]
  accessDenialLogs  AccessDenialLog[]
  conversations     Conversation[]

  @@index([adminUserId])
  @@index([createdBy])
  @@index([isActive])
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  name String
  searchMetadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships          OrganizationMembership[]
  groupMemberships     GroupMembership[]
  adminOrganizations   Organization[] @relation("AdminOrganizations")
  createdOrganizations Organization[] @relation("CreatedOrganizations")
  sentInvitations      OrganizationInvite[] @relation("SentInvitations")
  auditLogs            AuditLog[]
  searchQueries        SearchQuery[]
  refreshTokens        RefreshToken[]
  sessions             UserSession[]
  accessDenialLogs     AccessDenialLog[]
  conversations        Conversation[]

  @@index([email])
}

model Group {
  id String @id @default(cuid())
  name String
  description String?
  organizationId String
  isDefault Boolean @default(false)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      GroupMembership[]
  documents    Document[]
  folders      Folder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([isDefault])
}

model GroupMembership {
  id String @id @default(cuid())
  userId String
  groupId String

  canUpload Boolean @default(true)
  canDelete Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  joinedAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
  @@index([groupId])
  @@index([userId])
}

model OrganizationMembership {
  id     String   @id @default(cuid())
  userId String
  organizationId String
  role   MembershipRole @default(MEMBER)

  canUpload Boolean @default(true)
  canDelete Boolean @default(false)
  canManageUsers Boolean @default(false)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Folder {
  id            String   @id @default(cuid())
  name          String
  isDeleted     Boolean @default(false)
  organizationId String
  groupId String?

  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  group Group?    @relation(fields: [groupId], references: [id], onDelete: SetNull)
  documents       Document[]
  parentFolder    Folder? @relation("FolderParent", fields: [parentFolderId], references: [id])
  parentFolderId  String?
  childFolders    Folder[] @relation("FolderParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([groupId])
  @@index([parentFolderId])
}

model Document {
  id            String   @id @default(cuid())
  title         String
  isDeleted     Boolean @default(false)
  organizationId String
  groupId       String?
  folderId      String?

  accessLevel AccessLevel @default(GROUP)
  restrictedToUsers String[] // If accessLevel == RESTRICTED, list of user IDs

  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  group         Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)
  folder        Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  // S3 file storage
  s3Bucket      String?
  s3Key         String?
  originalFileName String?
  fileSize      Int?
  mimeType      String?

  recency       Int @default(0)
  popularity    Int @default(0)

  chunks        Chunk[]
  embeddings    Embedding[]
  metadata      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([groupId])
  @@index([folderId])
  @@index([isDeleted])
  @@index([recency])
  @@index([popularity])
  @@index([s3Key])
}

model Chunk {
  id          String   @id @default(cuid())
  content     String
  metadata      Json?

  isDeleted     Boolean @default(false)
  organizationId String

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  embedding  Embedding?

  recency       Int @default(0)
  popularity    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentId])
  @@index([organizationId])
  @@index([isDeleted])
  @@index([recency])
  @@index([popularity])
}

model Embedding {
  id          String   @id @default(cuid())
  vector      Bytes
  metadata      Json?

  isDeleted     Boolean @default(false)
  organizationId String

  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  chunk       Chunk    @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId     String   @unique
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  recency       Int @default(0)
  popularity    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentId])
  @@index([chunkId])
  @@index([organizationId])
  @@index([isDeleted])
  @@index([recency])
  @@index([popularity])
}

// Search analytics
model SearchQuery {
  id String @id @default(cuid())

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  query        String
  resultsCount Int
  timestamp    DateTime @default(now())

  @@index([userId])
  @@index([organizationId])
  @@index([timestamp])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  organizationId String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model UserSession {
  id             String   @id
  userId         String
  organizationId String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([expiresAt])
}

model OrganizationInvite {
  id             String @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String
  role           MembershipRole
  groupIds       String[] // Groups to add user to
  status         InviteStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("SentInvitations", fields: [invitedBy], references: [id])

  @@unique([email, organizationId]) // Can't invite same email twice to same org
  @@index([email])
  @@index([organizationId])
  @@index([status])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

enum MessageRole {
  USER
  ASSISTANT
}

// Audit logging - for future use
model AuditLog {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  action         String
  targetType     String   // e.g., "organization", "group", "document"
  targetId       String
  changes        Json?
  timestamp      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([timestamp])
}

// Access denial logging for recommendation system
model AccessDenialLog {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  searchQuery    String   // The search query that triggered the denial
  chunkId        String   // The chunk that was filtered out
  documentId     String   // The document containing the chunk
  groupId        String?  // The group that owns the document (if applicable)
  accessLevel    String   // The access level that prevented access
  denialReason   String   // Specific reason for denial (e.g., "not_in_group", "insufficient_role")
  similarity     Float?   // The similarity score before filtering (if available)
  metadata       Json?    // Additional context (document title, etc.)
  timestamp      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([groupId])
  @@index([timestamp])
  @@index([userId, groupId]) // For finding denials by user and group
}

model Conversation {
  id             String @id @default(cuid())
  title          String
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([userId, organizationId, updatedAt])
  @@index([organizationId])
}

model Message {
  id             String @id @default(cuid())
  conversationId String
  content        String
  role           MessageRole
  sources        Json? // RAG sources for assistant messages
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}
