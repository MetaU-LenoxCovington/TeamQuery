// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipRole {
  ADMIN
  MEMBER
}

enum AccessLevel {
  READ
  EDIT
}

model Organization {
  id String @id @default(cuid())
  name String
  maxWords Int?
  currentWordCount Int @default(0)
  lastIndexUpdate DateTime?
  lastDataChange DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminUserId String
  adminUser User @relation("AdminOrganizations", fields: [adminUserId], references: [id])

  memberships       OrganizationMembership[]
  documents         Document[]
  folders           Folder[]
  permissionsGroups PermissionsGroup[]
  auditLogs         AuditLog[]
  searchQueries     SearchQuery[]

  @@index([adminUserId])
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  name String
  searchMetadata Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships        OrganizationMembership[]
  adminOrganizations Organization[] @relation("AdminOrganizations")
  auditLogs          AuditLog[]
  searchQueries      SearchQuery[]
  documentAccesses   DocumentAccess[]

  // Access control relation
  documentAccess   DocumentUserAccess[]

  refreshTokens RefreshToken[]

  @@index([email])
}

model PermissionsGroup {
  id String @id @default(cuid())
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  name String
  description String?
  permissions String[] // Array of OrganizationPermission enum values
  memberships OrganizationMembership[]

  // Relations for access control
  documentAccess   DocumentGroupAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, name])
  @@index([organizationId])
}

model OrganizationMembership {
  id     String   @id @default(cuid())
  userId String
  role   MembershipRole @default(MEMBER)
  status MembershipStatus @default(PENDING)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  permissionsGroup   PermissionsGroup? @relation(fields: [permissionsGroupId], references: [id])
  permissionsGroupId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REJECTED
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  organizationId String
  action      String
  targetType  String
  targetId    String?
  details     Json?

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([organizationId])
  @@index([userId])
  @@index([createdAt])
}

model Folder {
  id            String   @id @default(cuid())
  name          String
  isDeleted     Boolean @default(false)
  organizationId String

  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  documents       Document[]
  parentFolder    Folder? @relation("FolderParent", fields: [parentFolderId], references: [id])
  parentFolderId  String?
  childFolders    Folder[] @relation("FolderParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([parentFolderId])
}

model Document {
  id            String   @id @default(cuid())
  title         String
  isDeleted     Boolean @default(false)
  organizationId String

  // S3 file storage
  s3Bucket      String?
  s3Key         String?
  originalFileName String?
  fileSize      Int?
  mimeType      String?

  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  allowedGroups DocumentGroupAccess[]
  allowedUsers  DocumentUserAccess[]
  accesses      DocumentAccess[]

  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId String?

  recency       Int @default(0)
  popularity    Int @default(0)

  chunks        Chunk[]
  embeddings    Embedding[]
  metadata      Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
  @@index([folderId])
  @@index([isDeleted])
  @@index([recency])
  @@index([popularity])
  @@index([s3Key])
}

model Chunk {
  id          String   @id @default(cuid())
  content     String
  metadata      Json?

  isDeleted     Boolean @default(false)

  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  embedding  Embedding?

  recency       Int @default(0)
  popularity    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentId])
  @@index([isDeleted])
  @@index([recency])
  @@index([popularity])
}

model Embedding {
  id          String   @id @default(cuid())
  vector      Bytes
  metadata      Json?

  isDeleted     Boolean @default(false)

  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  chunk       Chunk    @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  chunkId     String   @unique

  recency       Int @default(0)
  popularity    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([documentId])
  @@index([chunkId])
  @@index([isDeleted])
  @@index([recency])
  @@index([popularity])
}

// Join table for document-level group access
model DocumentGroupAccess {
  document    Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  group       PermissionsGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String

  accessLevel AccessLevel
  grantedBy   String      // userId who granted access
  grantedAt   DateTime    @default(now())

  @@id([documentId, groupId])
  @@index([documentId])
  @@index([groupId])
}

// Join table for document-level user access
model DocumentUserAccess {
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  accessLevel AccessLevel
  grantedBy   String      // userId who granted access
  grantedAt   DateTime    @default(now())

  @@id([documentId, userId])
  @@index([documentId])
  @@index([userId])
}


// access tracking
model DocumentAccess {
  id String @id @default(cuid())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String

  accessCount    Int @default(1)
  lastAccessedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, documentId])
  @@index([userId])
  @@index([documentId])
  @@index([lastAccessedAt])
}

// Search analytics
model SearchQuery {
  id String @id @default(cuid())

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  query        String
  resultsCount Int
  timestamp    DateTime @default(now())

  @@index([userId])
  @@index([organizationId])
  @@index([timestamp])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  organizationId String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}
